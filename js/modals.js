// js/modals.js
import {
  TMDB_IMAGE_BASE_URL_W92,
  TMDB_IMAGE_BASE_URL_W500,
  YOUTUBE_EMBED_URL,
  fetchMovieDetailsFromApi,
  searchTmdbMovies,
} from "./api.js";
import { setupStarRating, setCurrentRating, currentRating } from "./rating.js";
import {
  saveMovie,
  deleteMovieFromList,
  watchedMovies,
  watchLaterMovies,
} from "./storage.js";
import { showSection } from "./sections.js";
import { showNotification } from "./utils.js";
import { enhanceCommentWithGemini } from "./gemini.js";
import { displayTmdbSearchResults } from "./render.js";
import { handleOpenCharacterSelection } from './chat.js';
// GÃœNCELLEME: user.js'den ilgili fonksiyonlarÄ± import ediyoruz.
import { isUserPro, updateUIForSubscriptionStatus } from './user.js';
import { showPaywall } from './paywall.js'; // YENÄ°: import ekle


// --- MODAL ELEMENT REFERANSLARI ---
let movieModalOverlay,
  modalTitle,
  movieIdInput,
  movieTmdbIdInput,
  movieTypeInput,
  movieTitleInput,
  moviePosterInput,
  movieRatingInputDiv,
  watchLaterCheckbox,
  watchedDateGroup,
  movieDateInput,
  movieCommentInput,
  enhanceCommentButton,
  chatWithCharacterButton,
  tmdbSearchResultsDiv,
  tmdbSearchMessage,
  movieRuntimeInput,
  movieGenresInput,
  movieDirectorInput,
  movieDetailsModalOverlay,
  detailModalTitle,
  detailModalBody,
  detailLottieLoader,
  detailMoviePoster,
  detailMovieReleaseDate,
  detailMovieGenres,
  detailMovieDirector,
  detailMovieOverview,
  detailMovieTrailerSection,
  detailMovieTrailerIframe,
  detailAddToLogButton,
  movieForm;

let isModalInitialized = false;

/**
 * Sadece bir kez Ã§alÄ±ÅŸarak Film Ekle/DÃ¼zenle modalÄ±nÄ±n iÃ§eriÄŸini oluÅŸturur,
 * referanslarÄ± atar ve olay dinleyicilerini baÄŸlar.
 */
function initializeMovieModal() {
    if (isModalInitialized) return;

    const overlay = document.getElementById("movie-modal-overlay");
    if (!overlay) return;

    const modalContent = document.createElement("div");
    modalContent.className = "modal-content";
    // DÃœZELTME: ButonlarÄ±n HTML'ine pro-feature sÄ±nÄ±fÄ± ve pro-badge span'Ä± doÄŸru ÅŸekilde eklendi.
    modalContent.innerHTML = `
        <div class="modal-header"><h2 id="modal-title"></h2></div>
        <form id="movie-form" novalidate>
            <input type="hidden" id="movie-id" /><input type="hidden" id="movie-tmdb-id" /><input type="hidden" id="movie-type" /><input type="hidden" id="movie-runtime-input" /><input type="hidden" id="movie-genres-input" /><input type="hidden" id="movie-director-input" />
            <div class="form-group">
                <label for="movie-title-input">Film AdÄ±:</label>
                <input type="text" id="movie-title-input" required placeholder="Film adÄ± yazmaya baÅŸlayÄ±n..." />
                <div id="tmdb-search-results" class="tmdb-search-results hidden"></div>
                <p id="tmdb-search-message" class="tmdb-search-message" style="display: none;"></p>
            </div>
            <input type="hidden" id="movie-poster-input" />
            <div class="form-group"><label for="movie-rating-input">PuanÄ±nÄ±z:</label><div id="movie-rating-input" class="rating-input"></div></div>
            <label class="toggle-switch-container"><span class="toggle-switch-label">Daha Sonra Ä°zle</span><div class="toggle-switch-wrapper"><input type="checkbox" id="watch-later-checkbox" /><span class="toggle-switch-slider"></span></div></label>
            <div class="form-group" id="watched-date-group"><label for="movie-date-input">Ä°zleme Tarihi:</label><input type="date" id="movie-date-input" value="" required /></div>
            <div class="form-group">
                <label for="movie-comment-input">Yorumunuz:</label>
                <textarea id="movie-comment-input" rows="3" placeholder="Filme dair dÃ¼ÅŸÃ¼ncelerinizi buraya yazÄ±n..."></textarea>
                <div class="form-buttons-group">
                    <button type="button" id="enhance-comment-button" class="enhance-comment-button pro-feature"><span class="loading-spinner"></span><span class="button-text">âœ¨ Yorumumu GeliÅŸtir<span class="pro-badge">PRO</span></span></button>
                    <button type="button" id="chat-with-character-button" class="chat-character-button hidden pro-feature"><span class="loading-spinner"></span><span class="button-text">ðŸŽ­ Karakterle Sohbet Et<span class="pro-badge">PRO</span></span></button>
                </div>
            </div>
            <div class="modal-actions">
                <button type="button" id="cancel-button" class="cancel-button">Ä°ptal</button>
                <button type="submit" id="save-button" class="save-button">Kaydet</button>
            </div>
        </form>
    `;
    overlay.appendChild(modalContent);

    // DOM referanslarÄ±nÄ± atama...
    movieModalOverlay = overlay;
    modalTitle = document.getElementById("modal-title");
    movieIdInput = document.getElementById("movie-id");
    movieTmdbIdInput = document.getElementById("movie-tmdb-id");
    movieTypeInput = document.getElementById("movie-type");
    movieTitleInput = document.getElementById("movie-title-input");
    moviePosterInput = document.getElementById("movie-poster-input");
    movieRatingInputDiv = document.getElementById("movie-rating-input");
    watchLaterCheckbox = document.getElementById("watch-later-checkbox");
    watchedDateGroup = document.getElementById("watched-date-group");
    movieDateInput = document.getElementById("movie-date-input");
    movieCommentInput = document.getElementById("movie-comment-input");
    enhanceCommentButton = document.getElementById("enhance-comment-button");
    chatWithCharacterButton = document.getElementById("chat-with-character-button");
    tmdbSearchResultsDiv = document.getElementById("tmdb-search-results");
    tmdbSearchMessage = document.getElementById("tmdb-search-message");
    movieRuntimeInput = document.getElementById("movie-runtime-input");
    movieGenresInput = document.getElementById("movie-genres-input");
    movieDirectorInput = document.getElementById("movie-director-input");
    movieForm = document.getElementById("movie-form");

    // Olay Dinleyicileri...
    movieForm.addEventListener("submit", handleMovieFormSubmit);
    document.getElementById("cancel-button").addEventListener("click", () => closeMovieMode());
    movieModalOverlay.addEventListener("click", (e) => {
        if (e.target === movieModalOverlay) closeMovieMode();
    });

    let tmdbSearchTimeout;

    watchLaterCheckbox.addEventListener("change", () => {
        const ratingGroup = movieRatingInputDiv.parentElement;
        const hasTmdbId = !!movieTmdbIdInput.value;
        
        if (watchLaterCheckbox.checked) {
            movieDateInput.disabled = true;
            movieDateInput.required = false;
            watchedDateGroup.style.display = "none";
            ratingGroup.style.display = "none";
            movieRatingInputDiv.innerHTML = "";
            enhanceCommentButton.style.display = "none";
            chatWithCharacterButton.classList.add("hidden");
        } else {
            movieDateInput.disabled = false;
            movieDateInput.required = true;
            watchedDateGroup.style.display = "block";
            ratingGroup.style.display = "block";
            setupStarRating(movieRatingInputDiv, 0);
            enhanceCommentButton.style.display = "block";
            if (hasTmdbId) {
                chatWithCharacterButton.classList.remove("hidden");
            }
        }
    });

    movieTitleInput.addEventListener("input", () => {
        if (movieTitleInput.readOnly) return;
        clearTimeout(tmdbSearchTimeout);
        tmdbSearchTimeout = setTimeout(() => {
            searchTmdbMovies(
                movieTitleInput.value,
                tmdbSearchResultsDiv,
                tmdbSearchMessage,
                displayTmdbSearchResults
            );
        }, 300);
    });

    // DÃœZELTME: "Yorumumu GeliÅŸtir" butonu tÄ±klama olayÄ±, Pro kontrolÃ¼ eklendi.
    enhanceCommentButton.addEventListener("click", async () => {
        if (!isUserPro()) {
        showPaywall(); // GÃœNCELLEME: alert yerine paywall gÃ¶ster
            return;
        }
        
        const currentComment = movieCommentInput.value.trim();
        if (currentComment.length < 10) {
            showNotification("LÃ¼tfen yorumunuzu geliÅŸtirmek iÃ§in en az 10 karakter girin.","error");
            return;
        }
        await enhanceCommentWithGemini(
            currentComment,
            movieTitleInput.value,
            movieCommentInput,
            enhanceCommentButton
        );
    });

    // DÃœZELTME: "Karakterle Sohbet" butonu tÄ±klama olayÄ±, Pro kontrolÃ¼ eklendi.
    chatWithCharacterButton.addEventListener('click', () => {
        if (!isUserPro()) {
        showPaywall(); // GÃœNCELLEME: alert yerine paywall gÃ¶ster
            return;
        }
        handleOpenCharacterSelection();
    });

    isModalInitialized = true;
}

/**
 * Film Ekle/DÃ¼zenle modalÄ±nÄ± aÃ§ar ve doldurur.
 */
export function openMovieMode(
  movieId = null,
  prefillData = null,
  originList = null
) {
  initializeMovieModal();

  const today = new Date().toISOString().split("T")[0];
  movieDateInput.max = today;

  movieForm.reset();
  setCurrentRating(0);

  tmdbSearchResultsDiv.innerHTML = "";
  tmdbSearchResultsDiv.classList.add("hidden");
  tmdbSearchMessage.style.display = "none";
  movieTitleInput.readOnly = false;
  chatWithCharacterButton.classList.add("hidden");

  const ratingGroup = movieRatingInputDiv.parentElement;

  if (movieId) {
    let movieToEdit;
    let isWatchLater = originList === "watch-later";

    if (isWatchLater) {
      movieToEdit = watchLaterMovies.find((movie) => movie.id === movieId);
    } else {
      movieToEdit = watchedMovies.find((movie) => movie.id === movieId);
    }

    if (movieToEdit) {
      modalTitle.textContent = "Filmi DÃ¼zenle";
      movieIdInput.value = movieToEdit.id;
      movieTmdbIdInput.value = movieToEdit.tmdbId || "";
      movieTypeInput.value = originList;
      movieRuntimeInput.value = movieToEdit.runtime || "";
      movieTitleInput.value = movieToEdit.title;
      moviePosterInput.value = movieToEdit.poster;
      movieCommentInput.value = movieToEdit.comment || "";
      movieGenresInput.value = JSON.stringify(movieToEdit.genres || []);
      movieDirectorInput.value = movieToEdit.director || "";
      watchLaterCheckbox.checked = isWatchLater;

      if (isWatchLater) {
        movieDateInput.disabled = true;
        movieDateInput.required = false;
        watchedDateGroup.style.display = "none";
        ratingGroup.style.display = "none";
        enhanceCommentButton.style.display = "none";
        setCurrentRating(0);
        movieRatingInputDiv.innerHTML = "";
      } else {
        movieDateInput.disabled = false;
        movieDateInput.required = true;
        watchedDateGroup.style.display = "block";
        ratingGroup.style.display = "block";
        enhanceCommentButton.style.display = "block";
        movieDateInput.value = movieToEdit.watchedDate || "";
        setCurrentRating(movieToEdit.rating || 0);
        setupStarRating(movieRatingInputDiv, movieToEdit.rating || 0);
      }
    }
  } else {
    modalTitle.textContent = "Film Ekle";
    movieIdInput.value = "";
    movieTypeInput.value = "watched";
    movieDateInput.value = today;
    watchLaterCheckbox.checked = false;
    movieDateInput.disabled = false;
    movieDateInput.required = true;
    watchedDateGroup.style.display = "block";
    ratingGroup.style.display = "block";
    enhanceCommentButton.style.display = "block";
    setupStarRating(movieRatingInputDiv, 0);

    if (prefillData) {
      movieTitleInput.value = prefillData.title || "";
      moviePosterInput.value = prefillData.poster || "";
      movieRuntimeInput.value = prefillData.runtime || "";
      movieGenresInput.value = JSON.stringify(prefillData.genres || []);
      movieDirectorInput.value = prefillData.director || "";
      movieTmdbIdInput.value = prefillData.tmdbId || "";
      if (prefillData.release_date) {
        movieDateInput.value = prefillData.release_date;
      }
      movieTitleInput.readOnly = true;
    }
  }

  const hasTmdbId = !!movieTmdbIdInput.value;
  const isWatchLaterChecked = watchLaterCheckbox.checked;

  if (hasTmdbId && !isWatchLaterChecked) {
    chatWithCharacterButton.classList.remove("hidden");
  } else {
    chatWithCharacterButton.classList.add("hidden");
  }

  // DÃœZELTME: Modal her aÃ§Ä±ldÄ±ÄŸÄ±nda, iÃ§indeki Pro Ã¶zelliklerin durumunu gÃ¼ncelle.
  // Bu, dinamik olarak eklenen butonlarÄ±n da kilitlenmesini saÄŸlar.
  updateUIForSubscriptionStatus();

  movieModalOverlay.classList.remove("hidden");
  setTimeout(() => movieModalOverlay.classList.add("visible"), 10);
}

// Geri kalan fonksiyonlarda (closeMovieMode, openMovieDetailsModal vb.) deÄŸiÅŸiklik yok.
export function closeMovieMode() {
    if (movieModalOverlay) {
        movieModalOverlay.classList.remove("visible");
        movieModalOverlay.addEventListener(
            "transitionend",
            () => {
                if (!movieModalOverlay.classList.contains("visible")) {
                    movieModalOverlay.classList.add("hidden");
                }
            },
            { once: true }
        );
    }
}

export async function openMovieDetailsModal(tmdbMovieId, isLayered = false) {
    if (!movieDetailsModalOverlay) {
        movieDetailsModalOverlay = document.getElementById("movie-details-modal-overlay");
        detailModalTitle = document.getElementById("detail-modal-title");
        detailModalBody = document.getElementById("detail-modal-body");
        detailLottieLoader = document.getElementById("detail-lottie-loader");
        detailMoviePoster = document.getElementById("detail-movie-poster");
        detailMovieReleaseDate = document.getElementById("detail-movie-release-date");
        detailMovieGenres = document.getElementById("detail-movie-genres");
        detailMovieDirector = document.getElementById("detail-movie-director");
        detailMovieOverview = document.getElementById("detail-movie-overview");
        detailMovieTrailerSection = document.getElementById("detail-movie-trailer-section");
        detailMovieTrailerIframe = document.getElementById("detail-movie-trailer-iframe");
        detailAddToLogButton = document.getElementById("detail-add-to-log-button");
    }

    
    if (isLayered) {
        movieDetailsModalOverlay.classList.add('is-layered');
    }

    movieDetailsModalOverlay.classList.remove("hidden");
    setTimeout(() => movieDetailsModalOverlay.classList.add("visible"), 10);
    
    detailModalBody.style.display = "none";
    detailLottieLoader.style.display = "flex";
    const player = detailLottieLoader.querySelector("dotlottie-player");
    if (player) player.play();

    detailModalTitle.textContent = "YÃ¼kleniyor...";
    detailAddToLogButton.disabled = true;

    const timerPromise = new Promise((resolve) => setTimeout(resolve, 500));
    const apiPromise = fetchMovieDetailsFromApi(tmdbMovieId);

    try {
        const [_, movieDetails] = await Promise.all([timerPromise, apiPromise]);
        const { movieData, directorName, trailerKey } = movieDetails;
        
        detailModalTitle.textContent = movieData.title || "Bilgi Yok";
        detailMoviePoster.src = movieData.poster_path ? `${TMDB_IMAGE_BASE_URL_W500}${movieData.poster_path}` : "https://placehold.co/112x160/2A2A2A/AAAAAA?text=Poster+Yok";
        detailMovieReleaseDate.textContent = movieData.release_date ? `Vizyon Tarihi: ${new Date(movieData.release_date).toLocaleDateString("tr-TR",{ year: "numeric", month: "long", day: "numeric" })}` : "Vizyon Tarihi: Bilinmiyor";
        detailMovieGenres.textContent = movieData.genres?.length > 0 ? `TÃ¼rler: ${movieData.genres.map((g) => g.name).join(", ")}` : "TÃ¼rler: Bilinmiyor";
        detailMovieDirector.textContent = `YÃ¶netmen: ${directorName}`;
        detailMovieOverview.textContent = movieData.overview || "Bu film iÃ§in Ã¶zet bulunmamaktadÄ±r.";

        if (trailerKey) {
            detailMovieTrailerIframe.src = `${YOUTUBE_EMBED_URL}${trailerKey}?rel=0`;
            detailMovieTrailerSection.classList.remove("hidden");
        } else {
            detailMovieTrailerIframe.src = '';
            detailMovieTrailerSection.classList.add("hidden");
        }

        const newButton = detailAddToLogButton.cloneNode(true);
        detailAddToLogButton.parentNode.replaceChild(newButton, detailAddToLogButton);
        detailAddToLogButton = newButton; 

        detailAddToLogButton.addEventListener("click", () => {
            closeMovieDetailsModal();
            const suggestionModal = document.getElementById('suggestionResultOverlay');
            if(suggestionModal && suggestionModal.classList.contains('visible')) {
                suggestionModal.classList.remove('visible');
            }

            openMovieMode(null, {
                title: movieData.title,
                tmdbId: movieData.id,
                poster: movieData.poster_path ? TMDB_IMAGE_BASE_URL_W92 + movieData.poster_path : "",
                release_date: movieData.release_date,
                runtime: movieData.runtime,
                genres: movieData.genres,
                director: directorName,
            });
        });
        detailAddToLogButton.disabled = false;

    } catch (error) {
        console.error("Film detaylarÄ± yÃ¼klenirken hata oluÅŸtu:", error);
        detailModalTitle.textContent = "Hata OluÅŸtu";
        detailMovieOverview.textContent = `Film detaylarÄ± yÃ¼klenirken bir sorun oluÅŸtu: ${error.message}`;
    } finally {
        if (player) player.stop();
        detailLottieLoader.style.display = "none";
        detailModalBody.style.display = "flex";
    }
}

export function closeMovieDetailsModal() {
  if (!movieDetailsModalOverlay) return;

  movieDetailsModalOverlay.classList.remove("visible");
  detailMovieTrailerIframe.src = "";

  movieDetailsModalOverlay.addEventListener('transitionend', () => {
      if (!movieDetailsModalOverlay.classList.contains('visible')) {
          movieDetailsModalOverlay.classList.add('hidden');
          movieDetailsModalOverlay.classList.remove('is-layered');
      }
  }, { once: true });

}

export async function handleMovieFormSubmit(e) {
  e.preventDefault();
  closeMovieMode();

  const movieData = {
    id: movieIdInput.value || Date.now().toString(),
    tmdbId: movieTmdbIdInput.value,
    title: movieTitleInput.value.trim(),
    poster:
      moviePosterInput.value ||
      `https://placehold.co/70x100/2A2A2A/AAAAAA?text=Poster+Yok`,
    comment: movieCommentInput.value,
    type: watchLaterCheckbox.checked ? "watch-later" : "watched",
    runtime: parseInt(movieRuntimeInput.value, 10) || 0,
    director: movieDirectorInput.value || "Bilinmiyor",
    genres: JSON.parse(movieGenresInput.value || "[]"),
    rating: watchLaterCheckbox.checked ? null : currentRating,
    watchedDate: watchLaterCheckbox.checked ? null : movieDateInput.value,
  };

  if (
    movieData.type === "watched" &&
    (movieData.rating === 0 || !movieData.watchedDate)
  ) {
    showNotification(
      "LÃ¼tfen puan ve izleme tarihi alanlarÄ±nÄ± doldurunuz.",
      "error"
    );
    return;
  }

  if (movieIdInput.value && movieTypeInput.value !== movieData.type) {
    await deleteMovieFromList(movieIdInput.value, movieTypeInput.value);
  }

  await saveMovie(movieData);
  showNotification(`'${movieData.title}' baÅŸarÄ±yla kaydedildi.`, "success");
}

const loadingSpinnerOverlay = document.getElementById("loadingSpinnerOverlay");
const particlesContainer = document.querySelector(".particles-container");
let particleInterval;

const particleImages = [
  "https://image.tmdb.org/t/p/w92/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg",
  "https://image.tmdb.org/t/p/w92/rBF8wVQN8hTwsGPgWbARNIJyEj.jpg",
  "https://image.tmdb.org/t/p/w92/qJ2tW6WMUDux911r6m7haRef0WH.jpg",
  "https://image.tmdb.org/t/p/w92/2u7zbn8EudG6kLlJXPv2DEqv6H.jpg",
  "https://image.tmdb.org/t/p/w92/suaEOtk1N1sgg2MTM7oZd2cfVp3.jpg",
  "https://image.tmdb.org/t/p/w92/8OKmBV5BUFzmozIC3pPWKHy17kx.jpg",
  "https://image.tmdb.org/t/p/w92/d5iIlFn5s0ImszYzrKYOFT0Rdl2.jpg",
  "https://image.tmdb.org/t/p/w92/bX2xnavhMYjWDoZp1VM6VnU1xwe.jpg",
];

function createParticle() {
  if (!particlesContainer) return;
  const particle = document.createElement("div");
  particle.className = "particle";

  const size = Math.random() * 40 + 10;
  const xPos = Math.random() * 100;
  const duration = Math.random() * 10 + 8;
  const delay = Math.random() * 5;
  const image =
    particleImages[Math.floor(Math.random() * particleImages.length)];

  particle.style.width = `${size}px`;
  particle.style.height = `${size}px`;
  particle.style.left = `${xPos}%`;
  particle.style.animationDuration = `${duration}s`;
  particle.style.animationDelay = `${delay}s`;
  particle.style.backgroundImage = `url(${image})`;

  particlesContainer.appendChild(particle);

  setTimeout(() => {
    particle.remove();
  }, (duration + delay) * 1000);
}

export function startSplashScreenEffects() {
  if (particleInterval) clearInterval(particleInterval);
  if (particlesContainer) particlesContainer.innerHTML = "";
  particleInterval = setInterval(createParticle, 200);
}

export function stopSplashScreenEffects() {
  if (particleInterval) clearInterval(particleInterval);
}

const loadingTexts = [
    // Klasikler
    "Film evreni taranÄ±yor...",
    "MÄ±sÄ±rlar hazÄ±rlanÄ±yor...",
    "En iyi koltuk seÃ§iliyor...",
    "YÃ¶netmenin kamerasÄ±ndan bakÄ±lÄ±yor...",
    "KÄ±rmÄ±zÄ± halÄ± seriliyor...",
    "Jenerik mÃ¼ziÄŸi besteleniyor...",
    "Post-prodÃ¼ksiyon efektleri ekleniyor...",

    // Karakter GÃ¶ndermeleri
    "Yoda ile GÃ¼Ã§ Ã¼zerine meditasyon yapÄ±lÄ±yor...",
    "Terminator 'I'll be back' dedi, bekleniyor...",
    "Sherlock Holmes ipuÃ§larÄ±nÄ± birleÅŸtiriyor...",
    "Vito Corleone'den reddedilemeyecek bir teklif alÄ±nÄ±yor...",
    "Neo'ya hangi hapÄ± seÃ§eceÄŸi soruluyor: Komedi mi, Dram mÄ±?",
    "Gandalf 'GeÃ§emezsin!' dedi, en iyi filmler geÃ§iyor...",
    "Kaptan Jack Sparrow'un pusulasÄ± en iyi filmi arÄ±yor...",
    "Forrest Gump'Ä±n Ã§ikolata kutusundan bir film seÃ§iliyor...",
    "John Wick'in kÃ¶peÄŸi iÃ§in en iyi animasyon bulunuyor...",
    "James Bond martini'sini hazÄ±rlÄ±yor: 'Ã‡alkalanmÄ±ÅŸ, karÄ±ÅŸtÄ±rÄ±lmamÄ±ÅŸ.'",
    "Ã–rÃ¼mcek Adam aÄŸlarÄ±nÄ± en iyi filme doÄŸru fÄ±rlatÄ±yor...",
    "Hogwarts'ta en iyi film iÃ§in Quidditch maÃ§Ä± dÃ¼zenleniyor...",
    "Indiana Jones, en iyi macera filmini bulmak iÃ§in antik haritalarÄ± inceliyor...",
    "Darth Vader, 'Benimle gel, en iyi filmi bulalÄ±m.' diyor...",
    "Hulk, 'En iyi filmi bulmak iÃ§in sinemaya gideceÄŸim!' diyor...",
    "Tony Stark, 'En iyi filmi bulmak iÃ§in Arc Reactor'Ä± kullanacaÄŸÄ±m.' diyor...",
    "Katniss Everdeen, 'En iyi filmi bulmak iÃ§in ok ve yayÄ±mÄ± kullanacaÄŸÄ±m.' diyor...",
    "Jack Dawson, 'En iyi filmi bulmak iÃ§in Titanic'i terk edeceÄŸim.' diyor...",
    "YÃ¼zÃ¼klerin Efendisi'nde Frodo, 'En iyi filmi bulmak iÃ§in YÃ¼zÃ¼k'Ã¼ yok edeceÄŸim.' diyor...",
    "Batman, Gotham'da en iyi filmi bulmak iÃ§in Batmobil'ini kullanÄ±yor...",


    // Yapay Zeka Esprileri
    "Algoritmalar kahve molasÄ±nda...",
    "1'ler ve 0'lar arasÄ±nda mÃ¼kemmel eÅŸleÅŸme aranÄ±yor...",
    "NÃ¶ral aÄŸlar arasÄ±nda sinapslar ateÅŸleniyor...",
    "Terabaytlarca film verisi eleniyor...",
    "Ã–neri motoru Ä±sÄ±nÄ±yor...",


     
    // MeÅŸhur Replikler
    "Houston, bir Ã¶nerimiz var...",
    "GÃ¶revimiz: MÃ¼kemmel Filmi Bulmak.",
    "BÃ¼yÃ¼k gÃ¼Ã§, bÃ¼yÃ¼k film Ã¶nerileri getirir.",
     "Batman sinemaya gizlice girdi, yakalanmadan ilerleniyor...",
Â  Â  "Thanos eldivenini taktÄ±... spoiler vermemeye Ã§alÄ±ÅŸÄ±yoruz!",
Â  Â  "HÄ±zlÄ± ve Ã–fkeli kadrosu park yeri arÄ±yor...",
Â  Â  "Harry Potter bÃ¼yÃ¼yÃ¼ yanlÄ±ÅŸ yaptÄ±, sahne baÅŸa sarÄ±ldÄ±...",
Â  Â  "Jokerâ€™in kahkahasÄ± susturulmaya Ã§alÄ±ÅŸÄ±lÄ±yor...",
Â  Â  "YÃ¼zÃ¼k Frodoâ€™ya geri gÃ¶nderiliyorâ€¦ kargo yolda.",
Â  Â  "Obi-Wan Ä±ÅŸÄ±n kÄ±lÄ±cÄ±nÄ± ÅŸarj ediyorâ€¦ lÃ¼tfen bekleyin.",
Â  Â  "Deadpool replik yazÄ±yorâ€¦ sansÃ¼rlemeye Ã§alÄ±ÅŸÄ±yoruz!",
Â  Â  "Iron Man zÄ±rhÄ±nÄ± giyiyorâ€¦ biraz zaman alabilir.",
Â  Â  "Godzilla seti daÄŸÄ±ttÄ±â€¦ tekrar kuruluyor.",
Â  Â  "Neo kÄ±rmÄ±zÄ± hapÄ± aldÄ±â€¦ sistem Ã§Ã¶kmeden yÃ¼kleniyor.",
Â  Â  "Wolverine tÄ±raÅŸa gittiâ€¦ penÃ§eleri keskinleÅŸiyor.",
Â  Â  "Gollum â€˜kÄ±ymetlimisssâ€™i kaybettiâ€¦ yardÄ±m ediyoruz.",
Â  Â  "Jack Sparrow pusulasÄ±nÄ± yine yanlÄ±ÅŸ tuttuâ€¦ rotayÄ± dÃ¼zeltiyoruz.",
Â  Â  "Hulk sinirlendiâ€¦ ama kontrol altÄ±nda.",
Â  Â  "Darth Vader nefes alÄ±yorâ€¦ biraz gÃ¼rÃ¼ltÃ¼lÃ¼ olabilir.",
Â  Â  "Lego parÃ§alarÄ± birleÅŸtiriliyorâ€¦ biri eksik, ayaÄŸÄ±nÄ±za dikkat!",
Â  Â  "Sherlock Holmes ipuÃ§larÄ±nÄ± topluyorâ€¦ biraz sabÄ±r.",
Â  Â  "Shrek bataklÄ±ÄŸÄ±nÄ± temizliyorâ€¦ kokular geÃ§ici.",
Â  Â  "James Bond son anda kÄ±yafetini Ã¼tÃ¼lÃ¼yor...",
Â  Â  "Spiderman aÄŸ atÄ±yor ama Wi-Fi zayÄ±f...",
Â  Â  "Gizemli kutu aÃ§Ä±lÄ±yorâ€¦ Jumanji mi bu?",
Â  Â  "Transformers dÃ¶nÃ¼ÅŸÃ¼mÃ¼nÃ¼ tamamlÄ±yorâ€¦ %76 tamamlandÄ±.",
Â  Â  "The Rock kaÅŸÄ±nÄ± kaldÄ±rdÄ±â€¦ ne olacaÄŸÄ± belirsiz.",
Â  Â  "Yapay zeka Skynetâ€™e baÄŸlanmadan Ã¶nce hÄ±z testi yapÄ±yor...",
Â  Â  "R2-D2 gÃ¼ncelleniyorâ€¦ bip bip bip bip bip!",
Â  Â  "Indiana Jones kayÄ±p sahneyi arÄ±yorâ€¦ yine yÄ±lan var.",
Â  Â  "Dracula geceyi bekliyorâ€¦ gÃ¼neÅŸ Ä±ÅŸÄ±ÄŸÄ±nda yÃ¼kleme yavaÅŸ.",
Â  Â  "Matrix yeniden baÅŸlatÄ±lÄ±yorâ€¦ Deja vu hissediyorsanÄ±z normal.",
Â  Â  "Avengers toplanÄ±yorâ€¦ Hawkeye nerede yine?",
Â  Â  "Kung Fu Panda meditasyon yapÄ±yorâ€¦ birazdan baÅŸlÄ±yoruz.",
Â  Â  "Buzz Lightyear sonsuzluÄŸa yol alÄ±yorâ€¦ ve Ã¶tesine!",
Â  Â  "Jedi Konseyi toplanÄ±yorâ€¦ Ã§aylar yeni geldi.",
Â  Â  "Minyonlar yÃ¼klemeyi sabote ettiâ€¦ dÃ¼zeltmeye Ã§alÄ±ÅŸÄ±yoruz.",
Â  Â  "Freddy Krueger uykudan uyandÄ±â€¦ birazdan uyanacaksÄ±nÄ±z.",
Â  Â  "Sauronâ€™un gÃ¶zÃ¼ sizi izliyorâ€¦ yÃ¼kleme tamamlanmak Ã¼zere."

];

export function showLoadingSpinner(text) {
  const loadingSpinnerOverlay = document.getElementById("loadingSpinnerOverlay");
  if (!loadingSpinnerOverlay) return;

  // EKLENECEK: YÃ¼kleme ekranÄ± iÃ§indeki lottie oynatÄ±cÄ±sÄ±nÄ± buluyoruz.
  const player = loadingSpinnerOverlay.querySelector("dotlottie-player");

  const displayText = text || loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
  document.getElementById("splash-text").textContent = displayText;

  loadingSpinnerOverlay.classList.remove("hidden");
  setTimeout(() => {
    loadingSpinnerOverlay.classList.add("visible");
    startSplashScreenEffects();
    // EKLENECEK: EÄŸer oynatÄ±cÄ± bulunduysa, play() komutuyla animasyonu baÅŸlatÄ±yoruz.
    if (player) {
      player.play();
    }
  }, 10);
}

export function hideLoadingSpinner() {
  const loadingSpinnerOverlay = document.getElementById(
    "loadingSpinnerOverlay"
  );
  if (!loadingSpinnerOverlay) return;

  // EKLENECEK: Durdurmak iÃ§in lottie oynatÄ±cÄ±sÄ±nÄ± tekrar buluyoruz.
  const player = loadingSpinnerOverlay.querySelector("dotlottie-player");
  // EKLENECEK: EÄŸer oynatÄ±cÄ± bulunduysa, stop() komutuyla animasyonu durduruyoruz.
  if (player) {
    player.stop();
  }

  loadingSpinnerOverlay.classList.remove("visible");
  stopSplashScreenEffects(); 

  loadingSpinnerOverlay.addEventListener(
    "transitionend",
    () => {
      if (!loadingSpinnerOverlay.classList.contains("visible")) {
        loadingSpinnerOverlay.classList.add("hidden");
      }
    },
    { once: true }
  );
}

function renderMovieModalContent() {
  if (movieModalOverlay.querySelector(".modal-content")) {
    return;
  }

  const modalContent = document.createElement("div");
  modalContent.className = "modal-content";

  modalContent.innerHTML = `
        <div class="modal-header">
          <h2 id="modal-title"></h2>
          <button type="button" class="close-modal-btn">&times;</button>
        </div>
        <form id="movie-form">
          <input type="hidden" id="movie-id" />
          <input type="hidden" id="movie-tmdb-id" />
          <input type="hidden" id="movie-type" />
          <input type="hidden" id="movie-runtime-input" />
          <input type="hidden" id="movie-genres-input" />
          <input type="hidden" id="movie-director-input" />
          <div class="form-group">
            <label for="movie-title-input">Film AdÄ±:</label>
            <input type="text" id="movie-title-input" required placeholder="Film adÄ± yazmaya baÅŸlayÄ±n..." />
            <div id="tmdb-search-results" class="tmdb-search-results hidden"></div>
            <p id="tmdb-search-message" class="tmdb-search-message" style="display: none"></p>
          </div>
          <input type="hidden" id="movie-poster-input" />
          <div class="form-group">
            <label for="movie-rating-input">PuanÄ±nÄ±z:</label>
            <div id="movie-rating-input" class="rating-input"></div>
          </div>
          <label class="toggle-switch-container">
            <span class="toggle-switch-label">Daha Sonra Ä°zle</span>
            <div class="toggle-switch-wrapper">
              <input type="checkbox" id="watch-later-checkbox" />
              <span class="toggle-switch-slider"></span>
            </div>
          </label>
          <div class="form-group" id="watched-date-group">
            <label for="movie-date-input">Ä°zleme Tarihi:</label>
            <input type="date" id="movie-date-input" value="" required />
          </div>
          <div class="form-group">
            <label for="movie-comment-input">Yorumunuz:</label>
            <textarea id="movie-comment-input" rows="3" placeholder="Filme dair dÃ¼ÅŸÃ¼ncelerinizi buraya yazÄ±n..."></textarea>
            <div class="form-buttons-group">
              <button type="button" id="enhance-comment-button" class="enhance-comment-button">
                <span class="loading-spinner"></span>
                <span class="button-text">âœ¨ Yorumumu GeliÅŸtir</span>
              </button>
              <button type="button" id="chat-with-character-button" class="chat-character-button hidden">
                <span class="loading-spinner"></span>
                <span class="button-text">ðŸŽ­ Karakterle Sohbet Et</span>
              </button>
            </div>
          </div>
          <div class="modal-actions">
            <button type="button" id="cancel-button" class="cancel-button">Ä°ptal</button>
            <button type="submit" id="save-button" class="save-button">Kaydet</button>
          </div>
        </form>
    `;

  movieModalOverlay.appendChild(modalContent);

  modalContent
    .querySelector(".close-modal-btn")
    .addEventListener("click", () => closeMovieMode(movieModalOverlay));
}