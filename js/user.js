// js/user.js
import { doc, getDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { db } from "./firebase.js";

// YENÄ°: Admin olarak tanÄ±mlamak istediÄŸiniz kullanÄ±cÄ±larÄ±n UID'lerini bu listeye ekleyin.
// 1. AdÄ±mda bulduÄŸunuz kendi UID'nizi tÄ±rnak iÅŸaretlerinin arasÄ±na yapÄ±ÅŸtÄ±rÄ±n.
const ADMIN_UIDS = ['510WsOiCBmdTYStLx14ZBvaikro1'];

// Uygulama iÃ§inde kullanÄ±cÄ±nÄ±n Pro durumunu hÄ±zlÄ±ca kontrol etmek iÃ§in
// yerel bir deÄŸiÅŸken tutacaÄŸÄ±z.
let currentUserStatus = {
    isPro: false,
    plan: null,
    endDate: null
};

/**
 * Firestore'dan mevcut kullanÄ±cÄ±nÄ±n abonelik durumunu Ã§eker ve gÃ¼nceller.
 * @param {string} userId - Mevcut giriÅŸ yapmÄ±ÅŸ kullanÄ±cÄ±nÄ±n ID'si.
 */
export async function fetchUserSubscriptionStatus(userId) {
    // YENÄ°: ADMIN KONTROLÃœ
    // Fonksiyonun en baÅŸÄ±nda, gelen userId'nin admin listesinde olup olmadÄ±ÄŸÄ±nÄ± kontrol et.
    if (userId && ADMIN_UIDS.includes(userId)) {
        console.log("ğŸ‘‘ Admin kullanÄ±cÄ± algÄ±landÄ±. TÃ¼m Ã¶zellikler aÃ§Ä±lÄ±yor.");
        currentUserStatus = {
            isPro: true,
            plan: 'admin', // PlanÄ± 'admin' olarak belirtelim
            endDate: null   // Adminlerin sÃ¼resi dolmaz
        };
        // Admin ise Firestore'a hiÃ§ sormadan iÅŸlemi burada bitir.
        return; 
    }

    // --- Buradan sonrasÄ± normal kullanÄ±cÄ±lar iÃ§in Ã§alÄ±ÅŸmaya devam eder ---

    if (!userId) {
        // KullanÄ±cÄ± yoksa veya anonim ise varsayÄ±lan olarak Pro deÄŸil.
        currentUserStatus = { isPro: false, plan: null, endDate: null };
        return;
    }

    const userDocRef = doc(db, "users", userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists() && userDocSnap.data().subscription) {
        const subData = userDocSnap.data().subscription;
        
        const isSubscriptionActive = subData.endDate && new Date(subData.endDate.toMillis()) > new Date();

        if (subData.isPro && isSubscriptionActive) {
            currentUserStatus = {
                isPro: true,
                plan: subData.plan || null,
                endDate: subData.endDate.toDate()
            };
        } else {
            currentUserStatus = { isPro: false, plan: null, endDate: null };
        }
    } else {
        currentUserStatus = { isPro: false, plan: null, endDate: null };
    }
    
    console.log("User subscription status updated:", currentUserStatus);
}

/**
 * Mevcut kullanÄ±cÄ±nÄ±n Pro olup olmadÄ±ÄŸÄ±nÄ± anÄ±nda dÃ¶ndÃ¼ren fonksiyon.
 * @returns {boolean}
 */
export function isUserPro() {
    return currentUserStatus.isPro;
}

/**
 * KullanÄ±cÄ±nÄ±n abonelik durumu kontrol edildikten sonra
 * arayÃ¼zdeki Pro Ã¶zellikleri kilitler veya aÃ§ar.
 */
export function updateUIForSubscriptionStatus() {
    const proFeatures = document.querySelectorAll('.pro-feature');
    const isPro = isUserPro();

    proFeatures.forEach(featureElement => {
        if (isPro) {
            // KullanÄ±cÄ± Pro ise, kilit sÄ±nÄ±fÄ±nÄ± kaldÄ±r.
            featureElement.classList.remove('feature-locked');
        } else {
            // KullanÄ±cÄ± Pro deÄŸilse, kilit sÄ±nÄ±fÄ±nÄ± ekle.
            featureElement.classList.add('feature-locked');
        }
    });
}